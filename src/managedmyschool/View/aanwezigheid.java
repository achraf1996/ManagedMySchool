/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package managedmyschool.View;

import java.lang.reflect.Field;
import java.sql.Array;
import java.time.LocalDate;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import managedmyschool.Controller.ClassMethodes;
import managedmyschool.Model.*;
import static managedmyschool.View.AddStudent.showResponse;

/**
 *
 * @author achrafchennan
 */
public class aanwezigheid extends javax.swing.JFrame {

    private Object[][] COLUMNSSTUDENTTABLESET = {{"ID"}, {"Voornaam"}, {"Achternaam"}, {new javax.swing.JCheckBox(), "Is Aanwezig"}};
    private String[] COLUMNSSTUDENTTABLE = {"ID", "Aanwezig", "Voornaam", "Achternaam", "Geboortedatum", "Straatnaam", "Huisnummer", "Postcode"};

    private DefaultTableModel model = new DefaultTableModel(COLUMNSSTUDENTTABLE, 0);

    private DefaultTableModel modelSetTable = new DefaultTableModel() {
        public Class<?> getColumnClass(int column) {
            switch (column) {
                case 0:
                    return int.class;
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

    };

    List<Lesson> lessonList;
    List<AanwezigheidModel> aanwezigList;
    List<Student> studentList;
    Boolean columsAreSet = false;

    ClassMethodes classMethode;

    /**
     * Creates new form aanwezigheid
     */
    public aanwezigheid(ClassMethodes classMetho) {
        lessonList = new ArrayList<Lesson>();
        aanwezigList = new ArrayList<AanwezigheidModel>();
        studentList = new ArrayList<Student>();
        classMethode = classMetho;
        initComponents();
    }
        public aanwezigheid() {
        lessonList = new ArrayList<Lesson>();
        aanwezigList = new ArrayList<AanwezigheidModel>();
        studentList = new ArrayList<Student>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        datumTextfield = new javax.swing.JFormattedTextField();
        datumTextfield.setValue(new Date());
        klassenCB = new javax.swing.JComboBox<>();
        btVorige = new javax.swing.JButton();
        uitleesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable(model);
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        studentTableSet = new javax.swing.JTable();
        setDatumTextField = new javax.swing.JFormattedTextField();
        setDatumTextField.setValue(new Date());
        klassenSetCB = new javax.swing.JComboBox<>();
        btVorige1 = new javax.swing.JButton();
        javax.swing.JButton invoerenBT = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("tab1", jPanel2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane3.setToolTipText("");

        datumTextfield.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        datumTextfield.setMaximumSize(new java.awt.Dimension(100, 30));
        datumTextfield.setMinimumSize(new java.awt.Dimension(100, 30));
        datumTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datumTextfieldActionPerformed(evt);
            }
        });

        List<Lesson> lessons = classMethode.getClasses();
        klassenCB.addItem("Selecteer een klas");

        for(Lesson les : lessons){
            klassenCB.addItem(les.getClassName());
        }
        klassenCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                klassenCBActionPerformed(evt);
            }
        });

        btVorige.setLabel("Vorige");
        btVorige.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVorigeActionPerformed(evt);
            }
        });

        uitleesButton.setLabel("Uitlezen");
        uitleesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uitleesButtonActionPerformed(evt);
            }
        });

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(studentTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(klassenCB, 0, 100, Short.MAX_VALUE)
                            .addComponent(datumTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btVorige)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uitleesButton)
                        .addGap(60, 60, 60))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 174, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(datumTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(klassenCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btVorige)
                    .addComponent(uitleesButton)))
        );

        jTabbedPane3.addTab("Uitlezen", jPanel1);

        studentTableSet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(studentTableSet);

        setDatumTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        setDatumTextField.setToolTipText("");
        setDatumTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDatumTextFieldActionPerformed(evt);
            }
        });

        lessons = classMethode.getClasses();
        klassenSetCB.addItem("Selecteer een klas");

        for(Lesson les : lessons){
            klassenSetCB.addItem(les.getClassName());
        }

        klassenSetCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectionChanged(evt);
            }
        });

        btVorige1.setLabel("Vorige");
        btVorige1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVorige1ActionPerformed(evt);
            }
        });

        invoerenBT.setLabel("Invoeren");
        invoerenBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoerenBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(klassenSetCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setDatumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btVorige1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 488, Short.MAX_VALUE)
                        .addComponent(invoerenBT)
                        .addGap(53, 53, 53))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoerenBT)
                    .addComponent(btVorige1))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(setDatumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(klassenSetCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 264, Short.MAX_VALUE))
        );

        setDatumTextField.getAccessibleContext().setAccessibleName("in");

        jTabbedPane3.addTab("Invoeren", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jTabbedPane3.getAccessibleContext().setAccessibleName("Invoeren aanwezigheid\n");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uitleesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uitleesButtonActionPerformed
        // TODO add your handling code here:
        String datum = datumTextfield.getText();
        DateFormat formatter = new SimpleDateFormat("dd-MM-yy");
        String className = klassenCB.getSelectedItem().toString();
        int rowCount = this.model.getRowCount();

        if (rowCount > 0) {
            for (int i = rowCount - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
        if (className != "Selecteer een klas" && datum != "Voer een datum in") {

            Date date = null;
            java.sql.Date sqlDate = null;
            try {
                date = formatter.parse(datum);
                sqlDate = new java.sql.Date(date.getTime());

            } catch (ParseException e) {
                e.printStackTrace();
            }

            this.aanwezigList = classMethode.getAanwezigheid(sqlDate.toString(), klassenCB.getSelectedItem().toString());
            aanwezigList.stream().distinct().collect(Collectors.toList());
            studentTable.setModel(model);
            for (AanwezigheidModel aanwezigheid : aanwezigList) {

                String aanwezigheidTekst = aanwezigheid.isAanwezig() ? "Ja" : "Nee";
                Student student = aanwezigheid.getStudent();
                ZipCode adres = student.getZipCode();

                Object[] data = {student.getId(), aanwezigheidTekst, student.getFirstName(), student.getLastName(), student.getBirthDay().toString(), adres.getStreetName(), adres.getHouseNumber(), adres.getZipCode()};
                model.addRow(data);

            }
            if (this.aanwezigList.size() < 1) {
                showResponse("Er is geen resultaat gevonden voor deze datum", "Geen Resultaat", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            String ErrorMessage = className == "Selecteer een klas" ? "U heeft geen klas geselecteerd, " : "";
            String ErrorMessage1 = datum == "Voer een datum in" ? "U heeft geen datum ingevoerd" : "";

            JOptionPane.showMessageDialog(null,
                    ErrorMessage + ErrorMessage1,
                    "Verplichten velden",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_uitleesButtonActionPerformed

    private void datumTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datumTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datumTextfieldActionPerformed

    private void setDatumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDatumTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setDatumTextFieldActionPerformed

    private void invoerenBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoerenBTActionPerformed
        // TODO add your handling code here:
        String datum = setDatumTextField.getText();

        DateFormat formatter = new SimpleDateFormat("dd-MM-yy");
        Date date = null;
        java.sql.Date sqlDate = null;
        try {

            date = (Date) formatter.parse(datum);
            sqlDate = new java.sql.Date(date.getTime());

        } catch (ParseException e) {
            e.printStackTrace();
        }
        String className = klassenSetCB.getSelectedItem().toString();
        List<Aanwezigheid> studentIds = new ArrayList<Aanwezigheid>();
        String respMessage = "";
        if (className != "Selecteer een klas" && datum != "Voer een datum in") {

            for (int i = 0; i < this.modelSetTable.getRowCount(); i++) {
                Object id = this.modelSetTable.getValueAt(i, 0);
                Object isAanwezig = this.modelSetTable.getValueAt(i, 3);

                String idSt = String.valueOf(id);
                String isAanw = String.valueOf(isAanwezig);
                Boolean isTrue = isAanw == "true" ? true : false;
                studentIds.add(new Aanwezigheid(idSt, isTrue));
            }
            respMessage = classMethode.setAanwezigheid(date, className, studentIds);
            if (respMessage.startsWith("De")) {
                showResponse(respMessage, "Ingevoerd", JOptionPane.INFORMATION_MESSAGE);
            } else {
                showResponse(respMessage, "Mislukt", JOptionPane.ERROR_MESSAGE);
            }

        } else {

            String ErrorMessage = className == "Selecteer een klas" ? "U heeft geen klas geselecteerd, " : "";
            String ErrorMessage1 = datum == "Voer een datum in" ? "U heeft geen datum ingevoerd" : "";

            JOptionPane.showMessageDialog(null,
                    ErrorMessage + ErrorMessage1,
                    "Verplichten velden",
                    JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_invoerenBTActionPerformed

    public static void showResponse(String responseText, String responseTitle, int joptionpane) {
        JOptionPane.showMessageDialog(null,
                responseText,
                responseTitle,
                joptionpane);
    }

    private void btVorigeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVorigeActionPerformed
        mainAppFrame main = new mainAppFrame();
        this.setVisible(false);

        main.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btVorigeActionPerformed

    private void btVorige1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVorige1ActionPerformed
        // TODO add your handling code here:

        mainAppFrame main = new mainAppFrame();
        this.setVisible(false);
        main.setVisible(true);
    }//GEN-LAST:event_btVorige1ActionPerformed

    private void klassenCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_klassenCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_klassenCBActionPerformed

    private void selectionChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectionChanged
        // TODO add your handling code here:
        studentList = classMethode.getStudents(klassenSetCB.getSelectedItem().toString());
        int rowCount = this.modelSetTable.getRowCount();

        if (rowCount > 0) {
            for (int i = rowCount - 1; i > -1; i--) {
                modelSetTable.removeRow(i);
            }
        }
        studentTableSet.setModel(modelSetTable);

        if (!this.columsAreSet) {
            modelSetTable.addColumn("ID");
            modelSetTable.addColumn("Voornaam");
            modelSetTable.addColumn("Achternaam");
            modelSetTable.addColumn("Is aanwezig");
            this.columsAreSet = true;
        }
        for (int i = 0; i < studentList.size(); i++) {

            Student student = studentList.get(i);
            Object[][] data = {new Object[]{student.getId(), student.getFirstName(), student.getLastName(), new Boolean(false)}};
            modelSetTable.addRow(data);
            modelSetTable.setValueAt(student.getId(), i, 0);
            modelSetTable.setValueAt(student.getFirstName(), i, 1);
            modelSetTable.setValueAt(student.getLastName(), i, 2);
            modelSetTable.setValueAt(false, i, 3);
        }

    }//GEN-LAST:event_selectionChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(aanwezigheid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(aanwezigheid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(aanwezigheid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aanwezigheid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new aanwezigheid().setVisible(true);
            }
        });

    }

    private void getClassesComboBox() {

        this.lessonList = classMethode.getClasses();

        for (Lesson les : lessonList) {
            klassenCB.addItem(les.getClassName());

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btVorige;
    private javax.swing.JButton btVorige1;
    private javax.swing.JFormattedTextField datumTextfield;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JComboBox<String> klassenCB;
    private javax.swing.JComboBox<String> klassenSetCB;
    private javax.swing.JFormattedTextField setDatumTextField;
    private javax.swing.JTable studentTable;
    private javax.swing.JTable studentTableSet;
    private javax.swing.JButton uitleesButton;
    // End of variables declaration//GEN-END:variables
}
